# simple model
model = keras.Sequential(
    [
        keras.layers.Input(shape=(128,128),batch_size=32,),
        keras.layers.Dense(12, activation="relu",),
        keras.layers.Dense(13, activation="relu"),
        keras.layers.Dense(num_classes,activation='softmax'),
    ]
)

model.compile()

model.summary()





# Model by keras
num_classes = 24
model = keras.Sequential(
    [
        keras.layers.Input(shape=(128,128,3),batch_size=32),
        keras.layers.Conv2D(32, kernel_size=(3, 3), activation="relu"),
        keras.layers.MaxPooling2D(pool_size=(2, 2)),
        # keras.layers.Conv2D(64, kernel_size=(3, 3), activation="relu"),
        # keras.layers.MaxPooling2D(pool_size=(2, 2)),
        keras.layers.Flatten(),
        keras.layers.Dropout(0.5),
        keras.layers.Dense(num_classes, activation="softmax"),
    ]
)
model.build()
model.summary()


# Model by roy
model = tf.keras.models.Sequential([

    tf.keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(128,128,3)),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2), 

    tf.keras.layers.Conv2D(64, (3,3), activation='relu'), 
    tf.keras.layers.MaxPooling2D(2,2),
    
    # Flatten the results to feed into a DNN
    tf.keras.layers.Flatten(), 

    tf.keras.layers.Dense(512, activation='relu'), 

    tf.keras.layers.Dense(24, activation='softmax')  
])

